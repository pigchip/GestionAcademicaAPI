<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GestionAcademicaAPI</name>
    </assembly>
    <members>
        <member name="T:GestionAcademicaAPI.Controllers.UsuarioController">
            <summary>
            Controlador para gestionar las operaciones relacionadas con los usuarios.
            </summary>
        </member>
        <member name="M:GestionAcademicaAPI.Controllers.UsuarioController.#ctor(MyProject.Repositories.Interfaces.IUsuarioRepository)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:GestionAcademicaAPI.Controllers.UsuarioController"/>.
            </summary>
            <param name="usuarioRepository">El repositorio de usuarios.</param>
        </member>
        <member name="M:GestionAcademicaAPI.Controllers.UsuarioController.GetUsuario(System.Int32)">
            <summary>
            Obtiene un usuario por su ID.
            </summary>
            <param name="id">El ID del usuario.</param>
            <returns>El usuario con el ID especificado.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Controllers.UsuarioController.GetUsuarioPorNombreUsuario(System.String)">
            <summary>
            Obtiene un usuario por su nombre de usuario.
            </summary>
            <param name="nombreUsuario">El nombre de usuario.</param>
            <returns>El usuario con el nombre de usuario especificado.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Controllers.UsuarioController.PostUsuario(GestionAcademicaAPI.Controllers.CrearUsuarioRequest)">
            <summary>
            Crea un nuevo usuario.
            </summary>
            <param name="request">La solicitud de creación de usuario.</param>
            <returns>El usuario creado.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Controllers.UsuarioController.DeleteUsuario(System.Int32)">
            <summary>
            Elimina un usuario por su ID.
            </summary>
            <param name="id">El ID del usuario a eliminar.</param>
            <returns>Resultado de la operación de eliminación.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Controllers.UsuarioController.Autenticar(GestionAcademicaAPI.Controllers.LoginRequest)">
            <summary>
            Autentica un usuario.
            </summary>
            <param name="request">La solicitud de autenticación.</param>
            <returns>El usuario autenticado.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Controllers.UsuarioController.RestablecerContraseña(GestionAcademicaAPI.Controllers.RestablecimientoContraseñaRequest)">
            <summary>
            Restablece la contraseña de un usuario.
            </summary>
            <param name="request">La solicitud de restablecimiento de contraseña.</param>
            <returns>Resultado de la operación de restablecimiento.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Controllers.UsuarioController.IniciarRestablecimientoContraseña(System.String)">
            <summary>
            Inicia el proceso de restablecimiento de contraseña.
            </summary>
            <param name="correoElectronico">El correo electrónico del usuario.</param>
            <returns>Resultado de la operación de inicio de restablecimiento.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Controllers.UsuarioController.GetUsuarios">
            <summary>
            Obtiene todos los usuarios.
            </summary>
            <returns>Una lista de todos los usuarios.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Controllers.UsuarioController.CambiarDatosPersonales(GestionAcademicaAPI.Controllers.CambiarDatosPersonalesRequest)">
            <summary>
            Modifica los datos personales de un usuario autenticándolo primero.
            </summary>
            <param name="request">La solicitud de actualización de datos personales que incluye el nombre de usuario, contraseña y los nuevos datos personales.</param>
            <returns>El usuario actualizado.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Controllers.UsuarioController.CambiarContraseña(GestionAcademicaAPI.Controllers.CambiarContraseñaRequest)">
            <summary>
            Modifica la contraseña de un usuario autenticándolo primero.
            </summary>
            <param name="request">La solicitud de cambio de contraseña que incluye el nombre de usuario, contraseña actual y la nueva contraseña.</param>
            <returns>Resultado de la operación de cambio de contraseña.</returns>
        </member>
        <member name="T:GestionAcademicaAPI.Controllers.LoginRequest">
            <summary>
            Representa una solicitud de inicio de sesión.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.LoginRequest.Username">
            <summary>
            El nombre de usuario.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.LoginRequest.Password">
            <summary>
            La contraseña.
            </summary>
        </member>
        <member name="T:GestionAcademicaAPI.Controllers.RestablecimientoContraseñaRequest">
            <summary>
            Representa una solicitud de restablecimiento de contraseña.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.RestablecimientoContraseñaRequest.CorreoElectronico">
            <summary>
            El correo electrónico del usuario.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.RestablecimientoContraseñaRequest.Token">
            <summary>
            El token de restablecimiento.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.RestablecimientoContraseñaRequest.NuevaContraseña">
            <summary>
            La nueva contraseña.
            </summary>
        </member>
        <member name="T:GestionAcademicaAPI.Controllers.CambiarDatosPersonalesRequest">
            <summary>
            Representa una solicitud de cambio de datos personales.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.CambiarDatosPersonalesRequest.Username">
            <summary>
            El nombre de usuario.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.CambiarDatosPersonalesRequest.Password">
            <summary>
            La contraseña actual.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.CambiarDatosPersonalesRequest.EmailPersonal">
            <summary>
            El nuevo correo electrónico personal.
            </summary>
        </member>
        <member name="T:GestionAcademicaAPI.Controllers.CambiarContraseñaRequest">
            <summary>
            Representa una solicitud de cambio de contraseña.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.CambiarContraseñaRequest.Username">
            <summary>
            El nombre de usuario.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.CambiarContraseñaRequest.Password">
            <summary>
            La contraseña actual.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.CambiarContraseñaRequest.NuevaContraseña">
            <summary>
            La nueva contraseña.
            </summary>
        </member>
        <member name="T:GestionAcademicaAPI.Controllers.CrearUsuarioRequest">
            <summary>
            Representa una solicitud para crear un nuevo usuario.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.CrearUsuarioRequest.Username">
            <summary>
            El nombre de usuario.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.CrearUsuarioRequest.EmailPersonal">
            <summary>
            El correo electrónico personal.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Controllers.CrearUsuarioRequest.Password">
            <summary>
            La contraseña.
            </summary>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IAdministradorRepository.GetAllAsync">
            <summary>
            Obtiene todos los administradores
            </summary>
            <returns>IEnumerable de administradores</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IAdministradorRepository.GetByIdAsync(System.Int32)">
            <summary>
            Obtiene un administrador por su ID
            </summary>
            <param name="id">Identificador del administrador</param>
            <returns>Administrador encontrado o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IAdministradorRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            Obtiene un administrador por el ID de usuario
            </summary>
            <param name="idUsuario">Identificador del usuario</param>
            <returns>Administrador encontrado o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IAdministradorRepository.FindAsync(System.Linq.Expressions.Expression{System.Func{MyProject.Models.Administrador,System.Boolean}})">
            <summary>
            Busca administradores según un criterio específico
            </summary>
            <param name="predicate">Condición de búsqueda</param>
            <returns>Administradores que cumplen el criterio</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IAdministradorRepository.AddAsync(MyProject.Models.Administrador)">
            <summary>
            Agrega un nuevo administrador
            </summary>
            <param name="administrador">Administrador a agregar</param>
            <returns>Administrador agregado</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IAdministradorRepository.UpdateAsync(MyProject.Models.Administrador)">
            <summary>
            Actualiza un administrador existente
            </summary>
            <param name="administrador">Administrador a actualizar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IAdministradorRepository.DeleteAsync(System.Int32)">
            <summary>
            Elimina un administrador
            </summary>
            <param name="id">Identificador del administrador a eliminar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IAdministradorRepository.ExistsForUserAsync(System.Int32)">
            <summary>
            Verifica si existe un administrador para un usuario específico
            </summary>
            <param name="idUsuario">Identificador del usuario</param>
            <returns>True si existe, False en caso contrario</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IComentarioRepository.GetAllAsync">
            <summary>
            Obtiene todos los comentarios
            </summary>
            <returns>IEnumerable de comentarios</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IComentarioRepository.GetByIdAsync(System.Int32)">
            <summary>
            Obtiene un comentario por su ID
            </summary>
            <param name="id">Identificador del comentario</param>
            <returns>Comentario encontrado o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IComentarioRepository.FindAsync(System.Linq.Expressions.Expression{System.Func{MyProject.Models.Comentario,System.Boolean}})">
            <summary>
            Busca comentarios según un criterio específico
            </summary>
            <param name="predicate">Condición de búsqueda</param>
            <returns>Comentarios que cumplen el criterio</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IComentarioRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            Obtiene comentarios por ID de usuario
            </summary>
            <param name="idUsuario">Identificador del usuario</param>
            <returns>Comentarios del usuario</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IComentarioRepository.GetByMateriaIdAsync(System.Int32)">
            <summary>
            Obtiene comentarios por ID de materia
            </summary>
            <param name="idMateria">Identificador de la materia</param>
            <returns>Comentarios de la materia</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IComentarioRepository.GetByDateRangeAsync(System.DateTime,System.DateTime)">
            <summary>
            Obtiene comentarios dentro de un rango de fechas
            </summary>
            <param name="fechaInicio">Fecha de inicio</param>
            <param name="fechaFin">Fecha de fin</param>
            <returns>Comentarios en el rango de fechas</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IComentarioRepository.AddAsync(MyProject.Models.Comentario)">
            <summary>
            Agrega un nuevo comentario
            </summary>
            <param name="comentario">Comentario a agregar</param>
            <returns>Comentario agregado</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IComentarioRepository.UpdateAsync(MyProject.Models.Comentario)">
            <summary>
            Actualiza un comentario existente
            </summary>
            <param name="comentario">Comentario a actualizar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IComentarioRepository.DeleteAsync(System.Int32)">
            <summary>
            Elimina un comentario
            </summary>
            <param name="id">Identificador del comentario a eliminar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IComentarioRepository.CountByMateriaAsync(System.Int32)">
            <summary>
            Cuenta el número de comentarios para una materia específica
            </summary>
            <param name="idMateria">Identificador de la materia</param>
            <returns>Número de comentarios en la materia</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IComentarioRepository.CountByUserAsync(System.Int32)">
            <summary>
            Cuenta el número de comentarios realizados por un usuario
            </summary>
            <param name="idUsuario">Identificador del usuario</param>
            <returns>Número de comentarios del usuario</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEscuelaRepository.GetAllAsync">
            <summary>
            Obtiene todas las escuelas
            </summary>
            <returns>IEnumerable de escuelas</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEscuelaRepository.GetByIdAsync(System.Int32)">
            <summary>
            Obtiene una escuela por su ID
            </summary>
            <param name="id">Identificador de la escuela</param>
            <returns>Escuela encontrada o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEscuelaRepository.FindAsync(System.Linq.Expressions.Expression{System.Func{MyProject.Models.Escuela,System.Boolean}})">
            <summary>
            Busca escuelas según un criterio específico
            </summary>
            <param name="predicate">Condición de búsqueda</param>
            <returns>Escuelas que cumplen el criterio</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEscuelaRepository.GetByNombreAsync(System.String)">
            <summary>
            Obtiene una escuela por su nombre
            </summary>
            <param name="nombre">Nombre de la escuela</param>
            <returns>Escuela encontrada o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEscuelaRepository.AddAsync(MyProject.Models.Escuela)">
            <summary>
            Agrega una nueva escuela
            </summary>
            <param name="escuela">Escuela a agregar</param>
            <returns>Escuela agregada</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEscuelaRepository.UpdateAsync(MyProject.Models.Escuela)">
            <summary>
            Actualiza una escuela existente
            </summary>
            <param name="escuela">Escuela a actualizar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEscuelaRepository.DeleteAsync(System.Int32)">
            <summary>
            Elimina una escuela
            </summary>
            <param name="id">Identificador de la escuela a eliminar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEscuelaRepository.ExistsByNombreAsync(System.String)">
            <summary>
            Verifica si existe una escuela con el nombre proporcionado
            </summary>
            <param name="nombre">Nombre de la escuela</param>
            <returns>True si existe, False en caso contrario</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEscuelaRepository.CountAsync">
            <summary>
            Obtiene el número total de escuelas
            </summary>
            <returns>Número de escuelas</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEscuelaRepository.GetEscuelasWithPropostasAsync">
            <summary>
            Obtiene escuelas que han realizado propuestas
            </summary>
            <returns>Escuelas con propuestas</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEstudianteRepository.GetAllAsync">
            <summary>
            Obtiene todos los estudiantes
            </summary>
            <returns>IEnumerable de estudiantes</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEstudianteRepository.GetByIdAsync(System.Int32)">
            <summary>
            Obtiene un estudiante por su ID
            </summary>
            <param name="id">Identificador del estudiante</param>
            <returns>Estudiante encontrado o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEstudianteRepository.GetByBoletaAsync(System.Int32)">
            <summary>
            Obtiene un estudiante por su número de boleta
            </summary>
            <param name="boleta">Número de boleta del estudiante</param>
            <returns>Estudiante encontrado o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEstudianteRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            Obtiene un estudiante por el ID de usuario
            </summary>
            <param name="idUsuario">Identificador del usuario</param>
            <returns>Estudiante encontrado o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEstudianteRepository.FindAsync(System.Linq.Expressions.Expression{System.Func{MyProject.Models.Estudiante,System.Boolean}})">
            <summary>
            Busca estudiantes según un criterio específico
            </summary>
            <param name="predicate">Condición de búsqueda</param>
            <returns>Estudiantes que cumplen el criterio</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEstudianteRepository.AddAsync(MyProject.Models.Estudiante)">
            <summary>
            Agrega un nuevo estudiante
            </summary>
            <param name="estudiante">Estudiante a agregar</param>
            <returns>Estudiante agregado</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEstudianteRepository.UpdateAsync(MyProject.Models.Estudiante)">
            <summary>
            Actualiza un estudiante existente
            </summary>
            <param name="estudiante">Estudiante a actualizar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEstudianteRepository.DeleteAsync(System.Int32)">
            <summary>
            Elimina un estudiante
            </summary>
            <param name="id">Identificador del estudiante a eliminar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEstudianteRepository.ExistsByBoletaAsync(System.Int32)">
            <summary>
            Verifica si existe un estudiante con la boleta proporcionada
            </summary>
            <param name="boleta">Número de boleta</param>
            <returns>True si existe, False en caso contrario</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEstudianteRepository.ExistsForUserAsync(System.Int32)">
            <summary>
            Verifica si existe un estudiante para un usuario específico
            </summary>
            <param name="idUsuario">Identificador del usuario</param>
            <returns>True si existe, False en caso contrario</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IEstudianteRepository.GetByCarreraAsync(System.String)">
            <summary>
            Obtiene estudiantes por carrera
            </summary>
            <param name="carrera">Nombre de la carrera</param>
            <returns>Estudiantes de la carrera especificada</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.GetAllAsync">
            <summary>
            Obtiene todas las materias
            </summary>
            <returns>IEnumerable de materias</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.GetByIdAsync(System.Int32)">
            <summary>
            Obtiene una materia por su ID
            </summary>
            <param name="id">Identificador de la materia</param>
            <returns>Materia encontrada o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.FindAsync(System.Linq.Expressions.Expression{System.Func{MyProject.Models.Materia,System.Boolean}})">
            <summary>
            Busca materias según un criterio específico
            </summary>
            <param name="predicate">Condición de búsqueda</param>
            <returns>Materias que cumplen el criterio</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.GetByEstudianteIdAsync(System.Int32)">
            <summary>
            Obtiene materias por ID de estudiante
            </summary>
            <param name="idEstudiante">Identificador del estudiante</param>
            <returns>Materias del estudiante</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.GetByNombreMateriaEscomAsync(System.String)">
            <summary>
            Obtiene materias por nombre de materia ESCOM
            </summary>
            <param name="nombreMateriaEscom">Nombre de la materia ESCOM</param>
            <returns>Materias con el nombre especificado</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.GetByNombreMateriaForaneaAsync(System.String)">
            <summary>
            Obtiene materias por nombre de materia foránea
            </summary>
            <param name="nombreMateriaForanea">Nombre de la materia foránea</param>
            <returns>Materias con el nombre especificado</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.GetByStatusAsync(System.String)">
            <summary>
            Obtiene materias por status
            </summary>
            <param name="status">Status de la materia</param>
            <returns>Materias con el status especificado</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.AddAsync(MyProject.Models.Materia)">
            <summary>
            Agrega una nueva materia
            </summary>
            <param name="materia">Materia a agregar</param>
            <returns>Materia agregada</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.UpdateAsync(MyProject.Models.Materia)">
            <summary>
            Actualiza una materia existente
            </summary>
            <param name="materia">Materia a actualizar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.DeleteAsync(System.Int32)">
            <summary>
            Elimina una materia
            </summary>
            <param name="id">Identificador de la materia a eliminar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.CountByEstudianteAsync(System.Int32)">
            <summary>
            Cuenta el número de materias por estudiante
            </summary>
            <param name="idEstudiante">Identificador del estudiante</param>
            <returns>Número de materias del estudiante</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.CountByStatusAsync(System.String)">
            <summary>
            Cuenta el número de materias por status
            </summary>
            <param name="status">Status de la materia</param>
            <returns>Número de materias con el status especificado</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.ExistsByNombreMateriaEscomAsync(System.String)">
            <summary>
            Verifica si existe una materia con el nombre de materia ESCOM
            </summary>
            <param name="nombreMateriaEscom">Nombre de la materia ESCOM</param>
            <returns>True si existe, False en caso contrario</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IMateriaRepository.ExistsByNombreMateriaForaneaAsync(System.String)">
            <summary>
            Verifica si existe una materia con el nombre de materia foránea
            </summary>
            <param name="nombreMateriaForanea">Nombre de la materia foránea</param>
            <returns>True si existe, False en caso contrario</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaMateriaRepository.GetAllAsync">
            <summary>
            Obtiene todas las relaciones PropuestaMateria
            </summary>
            <returns>IEnumerable de PropuestaMateria</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaMateriaRepository.GetByIdAsync(System.Int32)">
            <summary>
            Obtiene una relación PropuestaMateria por su ID
            </summary>
            <param name="id">Identificador de la relación</param>
            <returns>PropuestaMateria encontrada o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaMateriaRepository.GetByPropuestaIdAsync(System.Int32)">
            <summary>
            Obtiene relaciones PropuestaMateria por ID de Propuesta
            </summary>
            <param name="idPropuesta">Identificador de la propuesta</param>
            <returns>Relaciones PropuestaMateria de la propuesta</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaMateriaRepository.GetByMateriaIdAsync(System.Int32)">
            <summary>
            Obtiene relaciones PropuestaMateria por ID de Materia
            </summary>
            <param name="idMateria">Identificador de la materia</param>
            <returns>Relaciones PropuestaMateria de la materia</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaMateriaRepository.AddAsync(MyProject.Models.PropuestaMateria)">
            <summary>
            Agrega una nueva relación PropuestaMateria
            </summary>
            <param name="propuestaMateria">Relación a agregar</param>
            <returns>Relación PropuestaMateria agregada</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaMateriaRepository.AddRangeAsync(System.Collections.Generic.IEnumerable{MyProject.Models.PropuestaMateria})">
            <summary>
            Agrega múltiples relaciones PropuestaMateria de una vez
            </summary>
            <param name="propuestaMaterias">Colección de relaciones a agregar</param>
            <returns>Colección de relaciones PropuestaMateria agregadas</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaMateriaRepository.DeleteAsync(System.Int32)">
            <summary>
            Elimina una relación PropuestaMateria
            </summary>
            <param name="id">Identificador de la relación a eliminar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaMateriaRepository.DeleteByPropuestaIdAsync(System.Int32)">
            <summary>
            Elimina todas las relaciones PropuestaMateria para una propuesta específica
            </summary>
            <param name="idPropuesta">Identificador de la propuesta</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaMateriaRepository.CountMateriasByPropuestaAsync(System.Int32)">
            <summary>
            Cuenta el número de materias para una propuesta
            </summary>
            <param name="idPropuesta">Identificador de la propuesta</param>
            <returns>Número de materias en la propuesta</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaMateriaRepository.CountPropuestasByMateriaAsync(System.Int32)">
            <summary>
            Cuenta el número de propuestas para una materia
            </summary>
            <param name="idMateria">Identificador de la materia</param>
            <returns>Número de propuestas para la materia</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.GetAllAsync">
            <summary>
            Obtiene todas las propuestas
            </summary>
            <returns>IEnumerable de propuestas</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.GetByIdAsync(System.Int32)">
            <summary>
            Obtiene una propuesta por su ID
            </summary>
            <param name="id">Identificador de la propuesta</param>
            <returns>Propuesta encontrada o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.FindAsync(System.Linq.Expressions.Expression{System.Func{MyProject.Models.Propuesta,System.Boolean}})">
            <summary>
            Busca propuestas según un criterio específico
            </summary>
            <param name="predicate">Condición de búsqueda</param>
            <returns>Propuestas que cumplen el criterio</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.GetBySolicitudIdAsync(System.Int32)">
            <summary>
            Obtiene propuestas por ID de solicitud
            </summary>
            <param name="idSolicitud">Identificador de la solicitud</param>
            <returns>Propuestas de la solicitud</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.GetByEscuelaIdAsync(System.Int32)">
            <summary>
            Obtiene propuestas por ID de escuela
            </summary>
            <param name="idEscuela">Identificador de la escuela</param>
            <returns>Propuestas de la escuela</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.GetByStatusAsync(System.String)">
            <summary>
            Obtiene propuestas por status
            </summary>
            <param name="status">Status de la propuesta</param>
            <returns>Propuestas con el status especificado</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.GetByDateRangeAsync(System.DateTime,System.DateTime)">
            <summary>
            Obtiene propuestas dentro de un rango de fechas
            </summary>
            <param name="fechaInicio">Fecha de inicio</param>
            <param name="fechaFin">Fecha de fin</param>
            <returns>Propuestas en el rango de fechas</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.AddAsync(MyProject.Models.Propuesta)">
            <summary>
            Agrega una nueva propuesta
            </summary>
            <param name="propuesta">Propuesta a agregar</param>
            <returns>Propuesta agregada</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.UpdateAsync(MyProject.Models.Propuesta)">
            <summary>
            Actualiza una propuesta existente
            </summary>
            <param name="propuesta">Propuesta a actualizar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.DeleteAsync(System.Int32)">
            <summary>
            Elimina una propuesta
            </summary>
            <param name="id">Identificador de la propuesta a eliminar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.CountBySolicitudAsync(System.Int32)">
            <summary>
            Cuenta el número de propuestas por solicitud
            </summary>
            <param name="idSolicitud">Identificador de la solicitud</param>
            <returns>Número de propuestas de la solicitud</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.CountByEscuelaAsync(System.Int32)">
            <summary>
            Cuenta el número de propuestas por escuela
            </summary>
            <param name="idEscuela">Identificador de la escuela</param>
            <returns>Número de propuestas de la escuela</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.CountByStatusAsync(System.String)">
            <summary>
            Cuenta el número de propuestas por status
            </summary>
            <param name="status">Status de la propuesta</param>
            <returns>Número de propuestas con el status especificado</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.IPropuestaRepository.GetLastPropuestaBySolicitudAsync(System.Int32)">
            <summary>
            Obtiene la última propuesta de una solicitud
            </summary>
            <param name="idSolicitud">Identificador de la solicitud</param>
            <returns>Última propuesta de la solicitud o null</returns>
        </member>
        <member name="T:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository">
            <summary>
            Interface para el repositorio de solicitudes
            </summary>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.GetAllAsync">
            <summary>
            Obtiene todas las solicitudes
            </summary>
            <returns>IEnumerable de solicitudes</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.GetByIdAsync(System.Int32)">
            <summary>
            Obtiene una solicitud por su ID
            </summary>
            <param name="id">Identificador de la solicitud</param>
            <returns>Solicitud encontrada o null</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.FindAsync(System.Linq.Expressions.Expression{System.Func{MyProject.Models.Solicitud,System.Boolean}})">
            <summary>
            Busca solicitudes según un criterio específico
            </summary>
            <param name="predicate">Condición de búsqueda</param>
            <returns>Solicitudes que cumplen el criterio</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.GetByEstudianteIdAsync(System.Int32)">
            <summary>
            Obtiene solicitudes por ID de estudiante
            </summary>
            <param name="idEstudiante">Identificador del estudiante</param>
            <returns>Solicitudes del estudiante</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.GetByStatusAsync(System.String)">
            <summary>
            Obtiene solicitudes por status
            </summary>
            <param name="status">Status de la solicitud</param>
            <returns>Solicitudes con el status especificado</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.GetByDateRangeAsync(System.DateTime,System.DateTime)">
            <summary>
            Obtiene solicitudes dentro de un rango de fechas
            </summary>
            <param name="fechaInicio">Fecha de inicio</param>
            <param name="fechaFin">Fecha de fin</param>
            <returns>Solicitudes en el rango de fechas</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.AddAsync(MyProject.Models.Solicitud)">
            <summary>
            Agrega una nueva solicitud
            </summary>
            <param name="solicitud">Solicitud a agregar</param>
            <returns>Solicitud agregada</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.UpdateAsync(MyProject.Models.Solicitud)">
            <summary>
            Actualiza una solicitud existente
            </summary>
            <param name="solicitud">Solicitud a actualizar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.DeleteAsync(System.Int32)">
            <summary>
            Elimina una solicitud
            </summary>
            <param name="id">Identificador de la solicitud a eliminar</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.CountByEstudianteAsync(System.Int32)">
            <summary>
            Cuenta el número de solicitudes por estudiante
            </summary>
            <param name="idEstudiante">Identificador del estudiante</param>
            <returns>Número de solicitudes del estudiante</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.CountByStatusAsync(System.String)">
            <summary>
            Cuenta el número de solicitudes por status
            </summary>
            <param name="status">Status de la solicitud</param>
            <returns>Número de solicitudes con el status especificado</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.Interfaces.ISolicitudRepository.GetLastSolicitudByEstudianteAsync(System.Int32)">
            <summary>
            Obtiene la última solicitud de un estudiante
            </summary>
            <param name="idEstudiante">Identificador del estudiante</param>
            <returns>Última solicitud del estudiante o null</returns>
        </member>
        <member name="T:GestionAcademicaAPI.Data.UsuarioRepository">
            <summary>
            Repositorio para gestionar entidades de tipo Usuario.
            </summary>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.#ctor(MyProject.Data.AppDbContext,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{MyProject.Repositories.Interfaces.IUsuarioRepository})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:GestionAcademicaAPI.Data.UsuarioRepository"/>.
            </summary>
            <param name="context">El contexto de la base de datos.</param>
            <param name="configuration">La configuración de la aplicación.</param>
            <param name="logger">El registrador de eventos.</param>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.ObtenerPorIdAsync(System.Int32)">
            <summary>
            Obtiene un Usuario por su ID.
            </summary>
            <param name="id">El ID del Usuario.</param>
            <returns>La entidad Usuario si se encuentra; de lo contrario, null.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.ObtenerPorNombreUsuarioAsync(System.String)">
            <summary>
            Obtiene un Usuario por su nombre de usuario.
            </summary>
            <param name="nombreUsuario">El nombre de usuario del Usuario.</param>
            <returns>La entidad Usuario si se encuentra; de lo contrario, null.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.ObtenerPorCorreoElectronicoAsync(System.String)">
            <summary>
            Obtiene un Usuario por su correo electrónico.
            </summary>
            <param name="correoElectronico">El correo electrónico del Usuario.</param>
            <returns>La entidad Usuario si se encuentra; de lo contrario, null.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.CrearAsync(MyProject.Models.Usuario)">
            <summary>
            Crea un nuevo Usuario.
            </summary>
            <param name="usuario">La entidad Usuario a crear.</param>
            <returns>La entidad Usuario creada.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.ActualizarAsync(MyProject.Models.Usuario)">
            <summary>
            Actualiza un Usuario existente.
            </summary>
            <param name="usuario">La entidad Usuario a actualizar.</param>
            <returns>La entidad Usuario actualizada.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.EliminarAsync(System.Int32)">
            <summary>
            Elimina un Usuario por su ID.
            </summary>
            <param name="id">El ID del Usuario a eliminar.</param>
            <returns>True si el Usuario fue eliminado; de lo contrario, false.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.ExisteNombreUsuarioAsync(System.String)">
            <summary>
            Verifica si un nombre de usuario existe.
            </summary>
            <param name="nombreUsuario">El nombre de usuario a verificar.</param>
            <returns>True si el nombre de usuario existe; de lo contrario, false.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.ExisteCorreoElectronicoAsync(System.String)">
            <summary>
            Verifica si un correo electrónico existe.
            </summary>
            <param name="correoElectronico">El correo electrónico a verificar.</param>
            <returns>True si el correo electrónico existe; de lo contrario, false.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.AutenticarAsync(System.String,System.String)">
            <summary>
            Autentica un Usuario por nombre de usuario o correo electrónico y contraseña.
            </summary>
            <param name="nombreUsuario">El nombre de usuario o correo electrónico del Usuario.</param>
            <param name="contraseña">La contraseña del Usuario.</param>
            <returns>La entidad Usuario autenticada si es exitoso; de lo contrario, null.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.IniciarProcesoRestablecimientoContraseñaAsync(System.String)">
            <summary>
            Inicia el proceso de restablecimiento de contraseña para un Usuario.
            </summary>
            <param name="correoElectronico">El correo electrónico del Usuario.</param>
            <returns>True si el proceso fue iniciado; de lo contrario, false.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.RestablecerContraseñaAsync(System.String,System.String,System.String)">
            <summary>
            Restablece la contraseña de un Usuario.
            </summary>
            <param name="correoElectronico">El correo electrónico del Usuario.</param>
            <param name="token">El token de restablecimiento de contraseña.</param>
            <param name="nuevaContraseña">La nueva contraseña.</param>
            <returns>True si la contraseña fue restablecida; de lo contrario, false.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.ObtenerTodosAsync">
            <summary>
            Obtiene todas las entidades Usuario.
            </summary>
            <returns>Una lista de todas las entidades Usuario.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.EnviarCorreoAutomatizadoAsync(MyProject.Models.Usuario,MyProject.Repositories.Interfaces.TipoCorreoElectronico,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Envía un correo electrónico automatizado a un Usuario.
            </summary>
            <param name="usuario">El Usuario al que se enviará el correo.</param>
            <param name="tipoCorreo">El tipo de correo a enviar.</param>
            <param name="parametrosAdicionales">Parámetros adicionales para el correo.</param>
            <returns>True si el correo fue enviado; de lo contrario, false.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.RegistrarIntentoCorreoAsync(MyProject.Models.Usuario,MyProject.Repositories.Interfaces.TipoCorreoElectronico,System.Boolean,System.String)">
            <summary>
            Registra un intento de envío de correo electrónico.
            </summary>
            <param name="usuario">El Usuario al que se envió el correo.</param>
            <param name="tipoCorreo">El tipo de correo enviado.</param>
            <param name="resultado">El resultado del intento de envío.</param>
            <param name="detallesError">Detalles de cualquier error ocurrido.</param>
            <returns>True si el intento fue registrado; de lo contrario, false.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Data.UsuarioRepository.GenerarTokenRestablecimientoAsync(System.String)">
            <summary>
            Genera un token de restablecimiento de contraseña para un Usuario.
            </summary>
            <param name="correoElectronico">El correo electrónico del Usuario.</param>
            <returns>El token generado.</returns>
        </member>
        <member name="T:GestionAcademicaAPI.Helpers.FunctionsHelper">
            <summary>
            Provides helper methods for security-related functions.
            </summary>
        </member>
        <member name="M:GestionAcademicaAPI.Helpers.FunctionsHelper.HashPassword(System.String)">
            <summary>
            Hashes the specified password using SHA-256.
            </summary>
            <param name="password">The password to hash.</param>
            <returns>The hashed password as a base64-encoded string.</returns>
        </member>
        <member name="M:GestionAcademicaAPI.Helpers.FunctionsHelper.VerifyPassword(System.String,System.String)">
            <summary>
            Verifies that the specified password matches the hashed password.
            </summary>
            <param name="password">The password to verify.</param>
            <param name="hashedPassword">The hashed password to compare against.</param>
            <returns><c>true</c> if the password matches the hashed password; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GestionAcademicaAPI.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:GestionAcademicaAPI.Migrations.UserAuth">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.UserAuth.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.UserAuth.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.UserAuth.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:GestionAcademicaAPI.Migrations.NewTable">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.NewTable.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.NewTable.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.NewTable.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:GestionAcademicaAPI.Migrations.Change">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.Change.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.Change.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.Change.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:GestionAcademicaAPI.Migrations.UsuarioChange">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.UsuarioChange.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.UsuarioChange.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:GestionAcademicaAPI.Migrations.UsuarioChange.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:GestionAcademicaAPI.Models.Entities.RegistroEnvioCorreo">
            <summary>
            Representa un registro de envío de correo.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Models.Entities.RegistroEnvioCorreo.Id">
            <summary>
            Obtiene o establece el identificador único del registro.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Models.Entities.RegistroEnvioCorreo.IdUsuario">
            <summary>
            Obtiene o establece el identificador del usuario que envió el correo.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Models.Entities.RegistroEnvioCorreo.TipoCorreo">
            <summary>
            Obtiene o establece el tipo de correo enviado.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Models.Entities.RegistroEnvioCorreo.FechaEnvio">
            <summary>
            Obtiene o establece la fecha de envío del correo.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Models.Entities.RegistroEnvioCorreo.Resultado">
            <summary>
            Obtiene o establece el resultado del envío del correo.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Models.Entities.RegistroEnvioCorreo.DetallesError">
            <summary>
            Obtiene o establece los detalles del error en caso de fallo en el envío.
            </summary>
        </member>
        <member name="P:GestionAcademicaAPI.Models.Entities.RegistroEnvioCorreo.Usuario">
            <summary>
            Obtiene o establece el usuario asociado al registro de envío de correo.
            </summary>
        </member>
        <member name="T:MyProject.Data.AppDbContext">
            <summary>
            Represents the database context for the application.
            </summary>
        </member>
        <member name="M:MyProject.Data.AppDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{MyProject.Data.AppDbContext})">
            <summary>
            Initializes a new instance of the <see cref="T:MyProject.Data.AppDbContext"/> class.
            </summary>
            <param name="options">The options to be used by a <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.</param>
        </member>
        <member name="P:MyProject.Data.AppDbContext.Usuarios">
            <summary>
            Gets or sets the DbSet for the Usuario entity.
            </summary>
        </member>
        <member name="P:MyProject.Data.AppDbContext.Administradores">
            <summary>
            Gets or sets the DbSet for the Administrador entity.
            </summary>
        </member>
        <member name="P:MyProject.Data.AppDbContext.Estudiantes">
            <summary>
            Gets or sets the DbSet for the Estudiante entity.
            </summary>
        </member>
        <member name="P:MyProject.Data.AppDbContext.Escuelas">
            <summary>
            Gets or sets the DbSet for the Escuela entity.
            </summary>
        </member>
        <member name="P:MyProject.Data.AppDbContext.Solicitudes">
            <summary>
            Gets or sets the DbSet for the Solicitud entity.
            </summary>
        </member>
        <member name="P:MyProject.Data.AppDbContext.Materias">
            <summary>
            Gets or sets the DbSet for the Materia entity.
            </summary>
        </member>
        <member name="P:MyProject.Data.AppDbContext.Propuestas">
            <summary>
            Gets or sets the DbSet for the Propuesta entity.
            </summary>
        </member>
        <member name="P:MyProject.Data.AppDbContext.PropuestaMaterias">
            <summary>
            Gets or sets the DbSet for the PropuestaMateria entity.
            </summary>
        </member>
        <member name="P:MyProject.Data.AppDbContext.Comentarios">
            <summary>
            Gets or sets the DbSet for the Comentario entity.
            </summary>
        </member>
        <member name="P:MyProject.Data.AppDbContext.RegistroEnvioCorreos">
            <summary>
            Gets or sets the DbSet for the RegistroEnvioCorreo entity.
            </summary>
        </member>
        <member name="M:MyProject.Data.AppDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the model that was discovered by convention from the entity types
            exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> properties on the derived context.
            </summary>
            <param name="modelBuilder">The builder being used to construct the model for this context.</param>
        </member>
        <member name="T:MyProject.Repositories.Interfaces.TipoCorreoElectronico">
            <summary>
            Tipos de correos electrónicos que se pueden enviar
            </summary>
        </member>
        <member name="F:MyProject.Repositories.Interfaces.TipoCorreoElectronico.RestablecimientoContraseña">
            <summary>
            Restablecimiento de contraseña
            </summary>
        </member>
        <member name="F:MyProject.Repositories.Interfaces.TipoCorreoElectronico.Bienvenida">
            <summary>
            Bienvenida
            </summary>
        </member>
        <member name="F:MyProject.Repositories.Interfaces.TipoCorreoElectronico.ConfirmacionRegistro">
            <summary>
            Confirmación de registro
            </summary>
        </member>
        <member name="F:MyProject.Repositories.Interfaces.TipoCorreoElectronico.CambioContraseña">
            <summary>
            Cambio de contraseña
            </summary>
        </member>
        <member name="F:MyProject.Repositories.Interfaces.TipoCorreoElectronico.NotificacionActividad">
            <summary>
            Notificación de actividad
            </summary>
        </member>
        <member name="T:MyProject.Repositories.Interfaces.IUsuarioRepository">
            <summary>
            Interfaz para el repositorio de usuarios
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.ObtenerPorIdAsync(System.Int32)">
            <summary>
            Obtiene un usuario por su identificador único
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.ObtenerPorNombreUsuarioAsync(System.String)">
            <summary>
            Obtiene un usuario por su nombre de usuario
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.ObtenerPorCorreoElectronicoAsync(System.String)">
            <summary>
            Obtiene un usuario por su correo electrónico
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.CrearAsync(MyProject.Models.Usuario)">
            <summary>
            Crea un nuevo usuario en el sistema
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.ActualizarAsync(MyProject.Models.Usuario)">
            <summary>
            Actualiza la información de un usuario existente
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.EliminarAsync(System.Int32)">
            <summary>
            Elimina un usuario del sistema
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.ExisteNombreUsuarioAsync(System.String)">
            <summary>
            Comprueba si un nombre de usuario ya existe
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.ExisteCorreoElectronicoAsync(System.String)">
            <summary>
            Comprueba si un correo electrónico ya existe
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.AutenticarAsync(System.String,System.String)">
            <summary>
            Autentica un usuario
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.IniciarProcesoRestablecimientoContraseñaAsync(System.String)">
            <summary>
            Inicia el proceso de restablecimiento de contraseña
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.RestablecerContraseñaAsync(System.String,System.String,System.String)">
            <summary>
            Restablece la contraseña de un usuario
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.ObtenerTodosAsync">
            <summary>
            Obtiene todos los usuarios
            </summary>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.EnviarCorreoAutomatizadoAsync(MyProject.Models.Usuario,MyProject.Repositories.Interfaces.TipoCorreoElectronico,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Envía un correo electrónico automatizado al usuario
            </summary>
            <param name="usuario">Usuario destinatario</param>
            <param name="tipoCorreo">Tipo de correo a enviar</param>
            <param name="parametrosAdicionales">Parámetros para personalizar el correo</param>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.RegistrarIntentoCorreoAsync(MyProject.Models.Usuario,MyProject.Repositories.Interfaces.TipoCorreoElectronico,System.Boolean,System.String)">
            <summary>
            Registra un intento de envío de correo electrónico
            </summary>
            <param name="usuario">Usuario destinatario</param>
            <param name="tipoCorreo">Tipo de correo enviado</param>
            <param name="resultado">Resultado del envío</param>
            <param name="detallesError">Detalles del error en caso de fallo</param>
        </member>
        <member name="M:MyProject.Repositories.Interfaces.IUsuarioRepository.GenerarTokenRestablecimientoAsync(System.String)">
            <summary>
            Genera un token de restablecimiento de contraseña
            </summary>
            <param name="correoElectronico">Correo electrónico del usuario</param>
        </member>
        <member name="T:MyProject.Models.Administrador">
            <summary>
            Representa un administrador en el sistema.
            </summary>
        </member>
        <member name="P:MyProject.Models.Administrador.Id">
            <summary>
            Obtiene o establece el identificador único del administrador.
            </summary>
        </member>
        <member name="P:MyProject.Models.Administrador.IdUsuario">
            <summary>
            Obtiene o establece el identificador del usuario asociado al administrador.
            </summary>
        </member>
        <member name="P:MyProject.Models.Administrador.Usuario">
            <summary>
            Obtiene o establece el usuario asociado al administrador.
            </summary>
        </member>
        <member name="T:MyProject.Models.Comentario">
            <summary>
            Representa un comentario en el sistema.
            </summary>
        </member>
        <member name="P:MyProject.Models.Comentario.Id">
            <summary>
            Obtiene o establece el identificador único del comentario.
            </summary>
        </member>
        <member name="P:MyProject.Models.Comentario.Contenido">
            <summary>
            Obtiene o establece el contenido del comentario.
            </summary>
        </member>
        <member name="P:MyProject.Models.Comentario.IdMateria">
            <summary>
            Obtiene o establece el identificador de la materia asociada al comentario.
            </summary>
        </member>
        <member name="P:MyProject.Models.Comentario.IdUsuario">
            <summary>
            Obtiene o establece el identificador del usuario que realizó el comentario.
            </summary>
        </member>
        <member name="P:MyProject.Models.Comentario.Fecha">
            <summary>
            Obtiene o establece la fecha en que se realizó el comentario.
            </summary>
        </member>
        <member name="P:MyProject.Models.Comentario.Materia">
            <summary>
            Obtiene o establece la materia asociada al comentario.
            </summary>
        </member>
        <member name="P:MyProject.Models.Comentario.Usuario">
            <summary>
            Obtiene o establece el usuario que realizó el comentario.
            </summary>
        </member>
        <member name="T:MyProject.Models.Escuela">
            <summary>
            Representa una escuela en el sistema.
            </summary>
        </member>
        <member name="P:MyProject.Models.Escuela.Id">
            <summary>
            Obtiene o establece el identificador único de la escuela.
            </summary>
        </member>
        <member name="P:MyProject.Models.Escuela.Nombre">
            <summary>
            Obtiene o establece el nombre de la escuela.
            </summary>
        </member>
        <member name="P:MyProject.Models.Escuela.Propuestas">
            <summary>
            Obtiene o establece la colección de propuestas asociadas a la escuela.
            </summary>
        </member>
        <member name="T:MyProject.Models.Estudiante">
            <summary>
            Representa un estudiante en el sistema.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.Id">
            <summary>
            Obtiene o establece el identificador único del estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.Nombre">
            <summary>
            Obtiene o establece el nombre del estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.ApellidoPat">
            <summary>
            Obtiene o establece el apellido paterno del estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.ApellidoMat">
            <summary>
            Obtiene o establece el apellido materno del estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.EmailEscolar">
            <summary>
            Obtiene o establece el correo electrónico escolar del estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.InePdf">
            <summary>
            Obtiene o establece el archivo PDF del INE del estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.Boleta">
            <summary>
            Obtiene o establece el número de boleta del estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.Carrera">
            <summary>
            Obtiene o establece la carrera del estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.IdUsuario">
            <summary>
            Obtiene o establece el identificador del usuario asociado al estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.Usuario">
            <summary>
            Obtiene o establece el usuario asociado al estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.Solicitudes">
            <summary>
            Obtiene o establece la colección de solicitudes realizadas por el estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Estudiante.Materias">
            <summary>
            Obtiene o establece la colección de materias asociadas al estudiante.
            </summary>
        </member>
        <member name="T:MyProject.Models.Materia">
            <summary>
            Representa una materia en el sistema.
            </summary>
        </member>
        <member name="P:MyProject.Models.Materia.Id">
            <summary>
            Obtiene o establece el identificador único de la materia.
            </summary>
        </member>
        <member name="P:MyProject.Models.Materia.NombreMateriaEscom">
            <summary>
            Obtiene o establece el nombre de la materia en ESCOM.
            </summary>
        </member>
        <member name="P:MyProject.Models.Materia.NombreMateriaForanea">
            <summary>
            Obtiene o establece el nombre de la materia en la institución foránea.
            </summary>
        </member>
        <member name="P:MyProject.Models.Materia.TemarioMateriaForaneaUrl">
            <summary>
            Obtiene o establece la URL del temario de la materia foránea.
            </summary>
        </member>
        <member name="P:MyProject.Models.Materia.Status">
            <summary>
            Obtiene o establece el estado de la materia.
            </summary>
        </member>
        <member name="P:MyProject.Models.Materia.IdEstudiante">
            <summary>
            Obtiene o establece el identificador del estudiante asociado a la materia.
            </summary>
        </member>
        <member name="P:MyProject.Models.Materia.Estudiante">
            <summary>
            Obtiene o establece el estudiante asociado a la materia.
            </summary>
        </member>
        <member name="P:MyProject.Models.Materia.PropuestaMaterias">
            <summary>
            Obtiene o establece la colección de propuestas de materia asociadas.
            </summary>
        </member>
        <member name="P:MyProject.Models.Materia.Comentarios">
            <summary>
            Obtiene o establece la colección de comentarios asociados a la materia.
            </summary>
        </member>
        <member name="T:MyProject.Models.Propuesta">
            <summary>
            Representa una propuesta realizada por un estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Propuesta.Id">
            <summary>
            Obtiene o establece el identificador único de la propuesta.
            </summary>
        </member>
        <member name="P:MyProject.Models.Propuesta.IdSolicitud">
            <summary>
            Obtiene o establece el identificador de la solicitud asociada.
            </summary>
        </member>
        <member name="P:MyProject.Models.Propuesta.IdEscuela">
            <summary>
            Obtiene o establece el identificador de la escuela asociada.
            </summary>
        </member>
        <member name="P:MyProject.Models.Propuesta.Status">
            <summary>
            Obtiene o establece el estado de la propuesta.
            </summary>
        </member>
        <member name="P:MyProject.Models.Propuesta.Fecha">
            <summary>
            Obtiene o establece la fecha en que se realizó la propuesta.
            </summary>
        </member>
        <member name="P:MyProject.Models.Propuesta.Solicitud">
            <summary>
            Obtiene o establece la solicitud asociada a la propuesta.
            </summary>
        </member>
        <member name="P:MyProject.Models.Propuesta.Escuela">
            <summary>
            Obtiene o establece la escuela asociada a la propuesta.
            </summary>
        </member>
        <member name="P:MyProject.Models.Propuesta.PropuestaMaterias">
            <summary>
            Obtiene o establece la colección de materias asociadas a la propuesta.
            </summary>
        </member>
        <member name="T:MyProject.Models.PropuestaMateria">
            <summary>
            Representa la relación entre una propuesta y una materia.
            </summary>
        </member>
        <member name="P:MyProject.Models.PropuestaMateria.Id">
            <summary>
            Obtiene o establece el identificador único de la relación.
            </summary>
        </member>
        <member name="P:MyProject.Models.PropuestaMateria.IdPropuesta">
            <summary>
            Obtiene o establece el identificador de la propuesta.
            </summary>
        </member>
        <member name="P:MyProject.Models.PropuestaMateria.IdMateria">
            <summary>
            Obtiene o establece el identificador de la materia.
            </summary>
        </member>
        <member name="P:MyProject.Models.PropuestaMateria.Propuesta">
            <summary>
            Obtiene o establece la propuesta asociada a la relación.
            </summary>
        </member>
        <member name="P:MyProject.Models.PropuestaMateria.Materia">
            <summary>
            Obtiene o establece la materia asociada a la relación.
            </summary>
        </member>
        <member name="T:MyProject.Models.Solicitud">
            <summary>
            Representa una solicitud realizada por un estudiante.
            </summary>
        </member>
        <member name="P:MyProject.Models.Solicitud.Id">
            <summary>
            Obtiene o establece el identificador único de la solicitud.
            </summary>
        </member>
        <member name="P:MyProject.Models.Solicitud.IdEstudiante">
            <summary>
            Obtiene o establece el identificador del estudiante que realizó la solicitud.
            </summary>
        </member>
        <member name="P:MyProject.Models.Solicitud.Status">
            <summary>
            Obtiene o establece el estado de la solicitud.
            </summary>
        </member>
        <member name="P:MyProject.Models.Solicitud.Fecha">
            <summary>
            Obtiene o establece la fecha en que se realizó la solicitud.
            </summary>
        </member>
        <member name="P:MyProject.Models.Solicitud.Estudiante">
            <summary>
            Obtiene o establece el estudiante asociado a la solicitud.
            </summary>
        </member>
        <member name="P:MyProject.Models.Solicitud.Propuestas">
            <summary>
            Obtiene o establece la colección de propuestas asociadas a la solicitud.
            </summary>
        </member>
        <member name="T:MyProject.Models.Usuario">
            <summary>
            Representa un usuario en el sistema.
            </summary>
        </member>
        <member name="P:MyProject.Models.Usuario.Id">
            <summary>
            Obtiene o establece el identificador único del usuario.
            </summary>
        </member>
        <member name="P:MyProject.Models.Usuario.Username">
            <summary>
            Obtiene o establece el nombre de usuario.
            </summary>
        </member>
        <member name="P:MyProject.Models.Usuario.EmailPersonal">
            <summary>
            Obtiene o establece el correo electrónico personal del usuario.
            </summary>
        </member>
        <member name="P:MyProject.Models.Usuario.Password">
            <summary>
            Obtiene o establece la contraseña del usuario.
            </summary>
        </member>
        <member name="P:MyProject.Models.Usuario.ResetPasswordToken">
            <summary>
            Obtiene o establece el token utilizado para restablecer la contraseña.
            </summary>
        </member>
        <member name="P:MyProject.Models.Usuario.ResetPasswordTokenExpiration">
            <summary>
            Obtiene o establece la fecha de expiración del token de restablecimiento de contraseña.
            </summary>
        </member>
        <member name="P:MyProject.Models.Usuario.Administrador">
            <summary>
            Obtiene o establece los detalles del administrador asociado, si los hay.
            </summary>
        </member>
        <member name="P:MyProject.Models.Usuario.Estudiante">
            <summary>
            Obtiene o establece los detalles del estudiante asociado, si los hay.
            </summary>
        </member>
        <member name="P:MyProject.Models.Usuario.Comentarios">
            <summary>
            Obtiene o establece la colección de comentarios realizados por el usuario.
            </summary>
        </member>
        <member name="P:MyProject.Models.Usuario.RegistroEnvioCorreos">
            <summary>
            Obtiene o establece la colección de intentos de envío de correo realizados por el usuario.
            </summary>
        </member>
    </members>
</doc>
